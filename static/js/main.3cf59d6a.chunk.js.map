{"version":3,"sources":["components/FriendCard/FriendCard.js","components/Title/Title.js","components/Wrapper/Wrapper.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","className","value","id","onClick","handleClick","alt","name","src","image","Title","children","currentScore","topScore","alert","Wrapper","Game","state","friends","rightWrong","clicked","shuffleFriends","array","setState","i","length","j","Math","floor","random","indexOf","handleIncrement","concat","handleReset","newScore","console","log","handleShuffle","shuffledFriends","removeFriend","filter","friend","this","map","key","occupation","location","Component","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4lDAeeA,G,MAZI,SAAAC,GAAK,OACtB,yBACEC,UAAU,OACVC,MAAOF,EAAMG,GACbC,QAAS,kBAAMJ,EAAMK,YAAYL,EAAMG,MAEvC,yBAAKF,UAAU,iBACb,yBAAKK,IAAKN,EAAMO,KAAMC,IAAKR,EAAMS,QAAU,KACtC,OCEIC,G,MAVD,SAAAV,GACZ,OACE,yBAAKC,UAAU,SACb,gCAAOD,EAAMW,SAAb,KACA,8CAAoBX,EAAMY,cAC1B,2CAAiBZ,EAAMa,UACvB,4BAAKb,EAAMc,UCJFC,G,MAFC,SAAAf,GAAK,OAAI,yBAAKC,UAAU,WAAf,IAA2BD,EAAMW,SAAjC,O,OCqGVK,E,2MAjGbC,MAAQ,CACNC,UACAN,aAAc,EACdC,SAAU,EACVM,WAAY,GACZC,QAAS,I,EAGXC,eAAiB,SAAAC,GACiB,IAA5B,EAAKL,MAAML,cACb,EAAKW,SAAS,CAACJ,WAAY,KAE7B,IAAK,IAAIK,EAAIF,EAAMG,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADC,EAElB,CAACF,EAAMI,GAAIJ,EAAME,IAAvCF,EAAME,GAFkC,KAE9BF,EAAMI,GAFwB,KAK3C,OAAOJ,G,EAGTjB,YAAc,SAAAF,IAC4B,IAApC,EAAKc,MAAMG,QAAQU,QAAQ3B,IAC7B,EAAK4B,kBACL,EAAKR,SAAS,CAAEH,QAAS,EAAKH,MAAMG,QAAQY,OAAO7B,OAErD,EAAKoB,SAAS,CAACJ,WAAY,6CACzB,EAAKc,gB,EAITF,gBAAkB,WAChB,IAAMG,EAAW,EAAKjB,MAAML,aAAe,EAC3CuB,QAAQC,IAAIF,GACZ,EAAKX,SAAS,CAAEX,aAAcsB,IACd,KAAbA,IACD,EAAKX,SAAS,CAAEJ,WAAY,aAC5B,EAAKc,eAEHC,GAAY,EAAKjB,MAAMJ,UACzB,EAAKU,SAAS,CAAEV,SAAUqB,IAE5B,EAAKG,iB,EAGPJ,YAAc,WACZ,EAAKV,SAAS,CACZX,aAAc,EACdC,SAAU,EAAKI,MAAMJ,SACrBO,QAAS,KAEX,EAAKiB,iB,EAGPA,cAAgB,WACd,IAAIC,EAAkB,EAAKjB,eAAeH,GAC1C,EAAKK,SAAS,CAAEL,QAASoB,K,EAG3BC,aAAe,SAAApC,GAEb,IAAMe,EAAU,EAAKD,MAAMC,QAAQsB,QAAO,SAAAC,GAAM,OAAIA,EAAOtC,KAAOA,KAElE,EAAKoB,SAAS,CAAEL,a,wEAIR,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CACEN,aAAc8B,KAAKzB,MAAML,aACzBC,SAAU6B,KAAKzB,MAAMJ,SACrBC,MAAO4B,KAAKzB,MAAME,YAGjB,IANH,eAOe,KAEf,kBAAC,EAAD,KACGuB,KAAKzB,MAAMC,QAAQyB,KAAI,SAAAF,GAAM,OAC5B,kBAAC,EAAD,CACEF,aAAc,EAAKA,aACnBpC,GAAIsC,EAAOtC,GACXyC,IAAKH,EAAOtC,GACZI,KAAMkC,EAAOlC,KACbE,MAAOgC,EAAOhC,MACdoC,WAAYJ,EAAOI,WACnBC,SAAUL,EAAOK,SACjBzC,YAAa,EAAKA,uB,GAzFb0C,aCIJC,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOJ,SAASK,UAEe,UAA7BD,OAAOJ,SAASK,UAEhBD,OAAOJ,SAASK,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3cf59d6a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./FriendCard.css\";\r\n\r\nconst FriendCard = props => (\r\n  <div\r\n    className=\"card\"\r\n    value={props.id}\r\n    onClick={() => props.handleClick(props.id)}\r\n  >\r\n    <div className=\"img-container\">\r\n      <img alt={props.name} src={props.image} />{\" \"}\r\n    </div>{\" \"}\r\n  </div>\r\n);\r\n\r\nexport default FriendCard;\r\n","import React from \"react\";\r\nimport \"./Title.css\";\r\n\r\nconst Title = props => {\r\n  return (\r\n    <div className=\"title\">\r\n      <h1 > {props.children} </h1>\r\n      <h3>Current Score: {props.currentScore}</h3>\r\n      <h3>High Score: {props.topScore}</h3>\r\n      <h1>{props.alert}</h1>\r\n    </div>\r\n  );\r\n};\r\nexport default Title;\r\n","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\"> {props.children} </div>;\r\n\r\nexport default Wrapper;\r\n","import React, { Component } from \"react\";\r\nimport FriendCard from \"../FriendCard\";\r\nimport Title from \"../Title\";\r\nimport Wrapper from \"../Wrapper\";\r\nimport friends from \"../../friend.json\";\r\n\r\nclass Game extends Component {\r\n  state = {\r\n    friends,\r\n    currentScore: 0,\r\n    topScore: 0,\r\n    rightWrong: \"\",\r\n    clicked: []\r\n  };\r\n\r\n  shuffleFriends = array => {\r\n    if (this.state.currentScore === 0) {\r\n      this.setState({rightWrong: \"\"})\r\n    }\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      let j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n\r\n    return array;\r\n  };\r\n\r\n  handleClick = id => {\r\n    if (this.state.clicked.indexOf(id) === -1) {\r\n      this.handleIncrement();\r\n      this.setState({ clicked: this.state.clicked.concat(id) });\r\n    } else {\r\n    this.setState({rightWrong: \"You already picked that card, try again!\"})\r\n      this.handleReset();\r\n    }\r\n  };\r\n\r\n  handleIncrement = () => {\r\n    const newScore = this.state.currentScore + 1;\r\n    console.log(newScore)\r\n    this.setState({ currentScore: newScore});\r\n    if(newScore === 12) {\r\n      this.setState({ rightWrong: \"You win!\" });\r\n      this.handleReset();\r\n    }\r\n    if (newScore >= this.state.topScore) {\r\n      this.setState({ topScore: newScore });\r\n    } \r\n    this.handleShuffle();\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.setState({\r\n      currentScore: 0,\r\n      topScore: this.state.topScore,\r\n      clicked: []\r\n        });\r\n    this.handleShuffle();\r\n  };\r\n\r\n  handleShuffle = () => {\r\n    let shuffledFriends = this.shuffleFriends(friends);\r\n    this.setState({ friends: shuffledFriends });\r\n  };\r\n\r\n  removeFriend = id => {\r\n    // Filter this.state.friends for friends with an id not equal to the id being removed\r\n    const friends = this.state.friends.filter(friend => friend.id !== id);\r\n    // Set this.state.friends equal to the new friends array\r\n    this.setState({ friends });\r\n  };\r\n\r\n  // Map over this.state.friends and render a FriendCard component for each friend object\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Title\r\n          currentScore={this.state.currentScore}\r\n          topScore={this.state.topScore}\r\n          alert={this.state.rightWrong}\r\n\r\n        >\r\n          {\" \"}\r\n          Friends List{\" \"}\r\n        </Title>\r\n        <Wrapper>\r\n          {this.state.friends.map(friend => (\r\n            <FriendCard\r\n              removeFriend={this.removeFriend}\r\n              id={friend.id}\r\n              key={friend.id}\r\n              name={friend.name}\r\n              image={friend.image}\r\n              occupation={friend.occupation}\r\n              location={friend.location}\r\n              handleClick={this.handleClick}\r\n            />\r\n          ))}\r\n        </Wrapper>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport './App.css';\nimport Game from './components/Game/Game'\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}